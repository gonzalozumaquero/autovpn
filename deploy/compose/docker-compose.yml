services:
  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    image: autovpn-installer:dev
    container_name: autovpn-installer-api
    environment:
      APP_MODE: installer             # "installer" (local asistido). En servidor usarías "server"
      FRONTEND_ORIGIN: http://localhost:3000
      WG_MODE: container              # o "host" si WireGuard corre nativo en la EC2
      WG_CONTAINER_NAME: wireguard
    ports:
      - "4000:4000"
    volumes:
      # Montamos repo para que la API pueda ejecutar Ansible y copiar el stack
      - ../../ansible:/app/ansible
      - ../../stack:/app/stack
      - ../../deploy/api/state:/app/state
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:4000/health"]
      interval: 10s
      timeout: 3s
      retries: 6
    restart: unless-stopped
    networks:
      - autovpn_net

  ui:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    image: autovpn-installer-ui:dev
    container_name: autovpn-installer-ui
    ports:
      - "3000:80"
    # Para que Nginx del frontend pueda hablar con la API en el host o en el mismo compose
    # Si tu nginx.conf usa "proxy_pass http://api:4000/;", esta red compartida es suficiente.
    depends_on:
      api:
        condition: service_healthy
    extra_hosts:
      # Si tu nginx.conf usa host.docker.internal (opción B), Linux necesita este atajo:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    networks:
      - autovpn_net

networks:
  autovpn_net:
    driver: bridge

