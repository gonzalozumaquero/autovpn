// src/App.jsx
import React, { useEffect, useMemo, useRef, useState } from "react";

/**
 * Utilidades
 */
function b64Random(bytes = 48) {
  const arr = new Uint8Array(bytes);
  crypto.getRandomValues(arr);
  let str = String.fromCharCode(...arr);
  return btoa(str).replace(/\+/g, "-").replace(/\//g, "_");
}

async function readFileAsText(file) {
  return new Promise((res, rej) => {
    const r = new FileReader();
    r.onload = () => res(r.result);
    r.onerror = rej;
    r.readAsText(file);
  });
}

function isEmail(v) {
  return /^[^@]+@[^@]+\.[^@]+$/.test(v);
}

function pwStrength(pw) {
  let score = 0;
  if (pw.length >= 8) score++;
  if (/[A-Z]/.test(pw)) score++;
  if (/[a-z]/.test(pw)) score++;
  if (/\d/.test(pw)) score++;
  if (/[^A-Za-z0-9]/.test(pw)) score++;
  return score; // 0..5
}

/**
 * Componente principal
 */
export default function App() {
  const [step, setStep] = useState(1);
  const [installDone, setInstallDone] = useState(false);

  // Datos del destino
  const [serverIp, setServerIp] = useState("");
  const [sshUser, setSshUser] = useState("ubuntu");
  const [pemText, setPemText] = useState("");
  const [pemFileName, setPemFileName] = useState("");

  // Credenciales admin (para sembrar el usuario inicial)
  const [adminEmail, setAdminEmail] = useState("");
  const [adminPassword, setAdminPassword] = useState("");
  const [adminPassword2, setAdminPassword2] = useState("");
  const [showPw, setShowPw] = useState(false);

  // Parámetros de stack
  const [useInternalTLS, setUseInternalTLS] = useState(true);
  const [wgPort, setWgPort] = useState(51820);
  const [wgSubnet, setWgSubnet] = useState("10.13.13.0/24");
  const [wgDNS, setWgDNS] = useState("1.1.1.1");
  const [timezone, setTimezone] = useState("Europe/Madrid");
  const [jwtSecret, setJwtSecret] = useState(() => b64Random(48));
  const wgPublicHost = useMemo(() => serverIp || "", [serverIp]);

  // Estado instalación / logs
  const [checkingSSH, setCheckingSSH] = useState(false);
  const [sshOk, setSshOk] = useState(null); // true/false
  const [configOk, setConfigOk] = useState(null);
  const [installing, setInstalling] = useState(false);
  const [logs, setLogs] = useState("");
  const [serverUrl, setServerUrl] = useState("");
  const esRef = useRef(null);
  const logsRef = useRef(null);

  // Auto-scroll logs
  useEffect(() => {
    const el = logsRef.current;
    if (el) el.scrollTop = el.scrollHeight;
  }, [logs]);

  function appendLog(line) {
    setLogs((prev) => (prev ? `${prev}\n${line}` : line));
  }

  async function handlePemFile(e) {
    const f = e.target.files?.[0];
    if (!f) return;
    setPemFileName(f.name);
    const txt = await readFileAsText(f);
    setPemText(txt);
  }

  async function testSSH() {
    if (!serverIp || !pemText) {
      alert("Rellena IP y selecciona o pega una clave .pem");
      return;
    }
    setCheckingSSH(true);
    setSshOk(null);
    try {
      const res = await fetch("/install/check-ssh", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          elastic_ip: serverIp.trim(),
          pem: pemText,
          user: sshUser.trim() || "ubuntu",
        }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.detail || "Fallo SSH");
      setSshOk(true);
    } catch (e) {
      console.error(e);
      setSshOk(false);
    } finally {
      setCheckingSSH(false);
    }
  }

  const adminEmailOk = isEmail(adminEmail);
  const pwOk = adminPassword.length >= 8 && adminPassword === adminPassword2;
  const canProceedStep1 =
    serverIp && pemText && sshUser && adminEmailOk && pwOk;

  async function writeConfig() {
    if (!canProceedStep1) {
      alert("Revisa IP/.pem y credenciales admin.");
      return;
    }
    setConfigOk(null);
    try {
      const body = {
        ssh: {
          elastic_ip: serverIp.trim(),
          pem: pemText,
          user: sshUser.trim() || "ubuntu",
        },
        vars: {
          use_internal_tls: useInternalTLS,
          wg_public_host: wgPublicHost,
          wg_port: Number(wgPort),
          wg_subnet: wgSubnet,
          wg_dns: wgDNS,
          jwt_secret: jwtSecret,
          timezone,
          // NUEVO: credenciales admin para el seeder del backend (Ansible hará el hash)
          admin_email: adminEmail.trim(),
          admin_password: adminPassword,
        },
      };
      const res = await fetch("/install/config", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
      const data = await res.json();
      if (!res.ok || !data?.ok)
        throw new Error(data?.detail || "Fallo al escribir configuración");
      setConfigOk(true);
      // Limpiar password del estado tras usarla
      setAdminPassword("");
      setAdminPassword2("");
      setStep(3);
    } catch (e) {
      console.error(e);
      setConfigOk(false);
    }
  }

  async function runInstall() {
    setInstalling(true);
    setLogs("");
    setServerUrl("");
    setInstallDone(false);
    try {
      const res = await fetch("/install/run", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          ssh: {
            elastic_ip: serverIp.trim(),
            pem: pemText,
            user: sshUser.trim() || "ubuntu",
          },
          vars: {
            use_internal_tls: useInternalTLS,
            wg_public_host: wgPublicHost,
            wg_port: Number(wgPort),
            wg_subnet: wgSubnet,
            wg_dns: wgDNS,
            jwt_secret: jwtSecret,
            timezone,
            admin_email: adminEmail.trim(),
            // por si el usuario volvió atrás: admite password si vino (se volverá a limpiar)
            admin_password: adminPassword || undefined,
          },
        }),
      });
      const data = await res.json();
      if (!res.ok || !data?.run_id)
        throw new Error(data?.detail || "No se obtuvo run_id");

      // Suscripción SSE a los logs
      const es = new EventSource(`/install/logs/${data.run_id}`);
      esRef.current = es;

      es.addEventListener("message", (ev) => {
        if (ev?.data) appendLog(ev.data);
      });

      es.addEventListener("info", (ev) => {
        if (ev?.data) appendLog(`[INFO] ${ev.data}`);
      });

      es.addEventListener("error", () => {
        appendLog("[ERROR] Error en el stream de logs");
      });

      es.addEventListener("done", (ev) => {
        const url = ev?.data?.trim();
        if (url) setServerUrl(url);
        appendLog(`[DONE] Instalación terminada. Panel: ${url || "(desconocido)"}`);
        es.close();
        setInstalling(false);
        setInstallDone(true);
        // higiene adicional: limpiar password (si quedara)
        setAdminPassword("");
        setAdminPassword2("");
      });
    } catch (e) {
      console.error(e);
      appendLog(`[ERROR] ${e.message}`);
      setInstalling(false);
      setAdminPassword("");
      setAdminPassword2("");
    }
  }

  return (
    <div style={{ maxWidth: 880, margin: "2rem auto", fontFamily: "system-ui, -apple-system, Segoe UI, Roboto, sans-serif" }}>
      <h1 style={{ marginBottom: 8 }}>AutoVPN – Instalación asistida</h1>
      <p style={{ marginTop: 0, color: "#555" }}>
        Fase 1: prepara tu servidor con Ansible (deploy & stack). Después abrirás el panel del servidor (Fase 2).
      </p>

      {/* Paso 1: datos del servidor, credenciales admin y parámetros */}
      {step === 1 && (
        <div>
          <h2>Paso 1 · Destino y credenciales</h2>
          <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 16 }}>
            <div>
              <label>IP/Elastic IP del servidor</label>
              <input
                style={{ width: "100%" }}
                placeholder="1.2.3.4"
                value={serverIp}
                onChange={(e) => setServerIp(e.target.value.trim())}
              />
            </div>
            <div>
              <label>Usuario SSH</label>
              <input
                style={{ width: "100%" }}
                placeholder="ubuntu"
                value={sshUser}
                onChange={(e) => setSshUser(e.target.value)}
              />
            </div>
            <div style={{ gridColumn: "1 / span 2" }}>
              <label>Clave SSH (.pem)</label>
              <div style={{ display: "flex", gap: 8 }}>
                <input type="file" accept=".pem" onChange={handlePemFile} />
                {pemFileName ? <code>{pemFileName}</code> : <span style={{ color: "#777" }}>o pega el contenido abajo</span>}
              </div>
              <textarea
                rows={6}
                style={{ width: "100%", marginTop: 8, fontFamily: "monospace" }}
                placeholder="-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----"
                value={pemText}
                onChange={(e) => setPemText(e.target.value)}
              />
            </div>
          </div>

          <h3 style={{ marginTop: 24 }}>Usuario administrador inicial</h3>
          <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 16 }}>
            <div>
              <label>Email</label>
              <input
                style={{ width: "100%" }}
                placeholder="admin@autovpn.local"
                value={adminEmail}
                onChange={(e) => setAdminEmail(e.target.value)}
              />
              {!adminEmailOk && adminEmail && (
                <small style={{ color: "crimson" }}>Formato de email inválido</small>
              )}
            </div>
            <div style={{ display: "flex", gap: 8, alignItems: "center" }}>
              <label style={{ whiteSpace: "nowrap" }}>Mostrar</label>
              <input type="checkbox" checked={showPw} onChange={(e) => setShowPw(e.target.checked)} />
            </div>
            <div>
              <label>Contraseña</label>
              <input
                style={{ width: "100%" }}
                type={showPw ? "text" : "password"}
                value={adminPassword}
                onChange={(e) => setAdminPassword(e.target.value)}
              />
              {adminPassword && (
                <small style={{ color: pwStrength(adminPassword) >= 4 ? "green" : "#a67c00" }}>
                  Fortaleza: {pwStrength(adminPassword)} / 5
                </small>
              )}
            </div>
            <div>
              <label>Repetir contraseña</label>
              <input
                style={{ width: "100%" }}
                type={showPw ? "text" : "password"}
                value={adminPassword2}
                onChange={(e) => setAdminPassword2(e.target.value)}
              />
              {adminPassword2 && adminPassword2 !== adminPassword && (
                <small style={{ color: "crimson" }}>No coincide</small>
              )}
            </div>
          </div>

          <h3 style={{ marginTop: 24 }}>Parámetros de despliegue</h3>
          <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr 1fr", gap: 16 }}>
            <label style={{ display: "flex", alignItems: "center", gap: 8 }}>
              <input
                type="checkbox"
                checked={useInternalTLS}
                onChange={(e) => setUseInternalTLS(e.target.checked)}
              />
              Usar TLS interno (Caddy <code>tls internal</code>)
            </label>

            <div>
              <label>WG Port</label>
              <input
                style={{ width: "100%" }}
                value={wgPort}
                onChange={(e) => setWgPort(e.target.value)}
              />
            </div>

            <div>
              <label>TimeZone</label>
              <input
                style={{ width: "100%" }}
                value={timezone}
                onChange={(e) => setTimezone(e.target.value)}
              />
            </div>

            <div>
              <label>WG Subnet</label>
              <input
                style={{ width: "100%" }}
                value={wgSubnet}
                onChange={(e) => setWgSubnet(e.target.value)}
              />
            </div>

            <div>
              <label>WG DNS</label>
              <input
                style={{ width: "100%" }}
                value={wgDNS}
                onChange={(e) => setWgDNS(e.target.value)}
              />
            </div>

            <div style={{ gridColumn: "1 / span 3" }}>
              <label>JWT Secret (autogenerado)</label>
              <div style={{ display: "flex", gap: 8 }}>
                <input style={{ width: "100%" }} value={jwtSecret} onChange={(e) => setJwtSecret(e.target.value)} />
                <button type="button" onClick={() => setJwtSecret(b64Random(48))}>Regenerar</button>
              </div>
            </div>
          </div>

          <div style={{ marginTop: 16, display: "flex", gap: 12 }}>
            <button onClick={testSSH} disabled={!serverIp || !pemText || !sshUser || checkingSSH}>
              {checkingSSH ? "Probando SSH..." : "Probar SSH"}
            </button>
            {sshOk === true && <span style={{ color: "green" }}>✓ SSH OK</span>}
            {sshOk === false && <span style={{ color: "crimson" }}>✗ SSH falló</span>}
          </div>

          <div style={{ marginTop: 24, display: "flex", gap: 12 }}>
            <button
              onClick={writeConfig}
              disabled={!canProceedStep1 || sshOk !== true}
              title={sshOk !== true ? "Primero verifica SSH" : ""}
            >
              Guardar configuración y continuar
            </button>
          </div>
        </div>
      )}

      {/* Paso 2 (instalación) */}
      {step === 3 && (
        <div>
          <h2>Paso 2 · Ejecutar instalación (Ansible)</h2>
          <p>Se lanzarán los playbooks <code>site-deploy.yml</code> y <code>site-stack.yml</code>. Verás los logs en vivo.</p>
          <div style={{ display: "flex", gap: 12, alignItems: "center" }}>
            <button onClick={() => setStep(1)} disabled={installing}>« Atrás</button>
            <button onClick={runInstall} disabled={installing}>Instalar ahora</button>
            <button
              onClick={() => setStep(4)}
              disabled={!installDone}
              title={!installDone ? "Espera a que la instalación termine" : ""}
            >
              Continuar al paso 3
            </button>
          </div>
          <h3 style={{ marginTop: 16 }}>Logs</h3>
          <pre
            style={{
              whiteSpace: "pre-wrap",
              background: "#0b1020",
              color: "#e6edf3",
              padding: 12,
              borderRadius: 8,
              maxHeight: 360,
              overflow: "auto",
              fontSize: 13,
            }}
            ref={logsRef}
          >
            {logs || "Esperando salida..."}
          </pre>
        </div>
      )}

      {/* Paso final */}
      {step === 4 && (
        <div>
          <h2>Paso 3 · ¡Listo!</h2>
          <p>Abre el panel del servidor (Fase 2: login+2FA, crear dispositivo, descargar .conf/QR).</p>
          <div style={{ display: "flex", gap: 12, alignItems: "center", marginBottom: 12 }}>
            <a href={serverUrl || `https://${serverIp}/`} target="_blank" rel="noreferrer">
              <button>Abrir panel del servidor</button>
            </a>
            {useInternalTLS && (
              <small style={{ color: "#555" }}>
                TLS interno: instala la CA de Caddy para evitar avisos.
              </small>
            )}
          </div>
          <div style={{ marginTop: 16 }}>
            <button onClick={() => { setStep(1); setLogs(""); setServerUrl(""); }}>
              Repetir instalación / otro servidor
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

